name: Code Quality & Analysis, Build, push and deploy
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  code-quality-analysis:
    name: Code Quality & Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ""

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Lint backend (Java)
        continue-on-error: true
        working-directory: backend
        run: |
          # URL encode the branch names before fetching
          BASE_REF=$(echo "${{ github.base_ref }}" | sed 's/(/\\(/g; s/)/\\)/g')
          HEAD_REF=$(echo "${{ github.head_ref }}" | sed 's/(/\\(/g; s/)/\\)/g')

          git fetch origin "$BASE_REF"
          git fetch origin "$HEAD_REF"

          CHANGED_FILES=$(git diff --name-only --diff-filter=d "origin/$BASE_REF".."origin/$HEAD_REF" 2>/dev/null | grep -E '\.java$' | tr '\n' ' ' || echo "")

          if [ ! -z "$CHANGED_FILES" ]; then
            echo "Checking changed Java files: $CHANGED_FILES"
            mvn spotless:check -Dspotless.check.skip=false
          else
            echo "No Java files changed. Skipping lint."
            exit 0
          fi

      - name: Lint frontend (TypeScript/React)
        continue-on-error: true
        working-directory: frontend
        run: |
          # URL encode the branch names before fetching
          BASE_REF=$(echo "${{ github.base_ref }}" | sed 's/(/\\(/g; s/)/\\)/g')
          HEAD_REF=$(echo "${{ github.head_ref }}" | sed 's/(/\\(/g; s/)/\\)/g')

          git fetch origin "$BASE_REF"
          git fetch origin "$HEAD_REF"

          CHANGED_FILES=$(git diff --name-only --diff-filter=d "origin/$BASE_REF".."origin/$HEAD_REF" 2>/dev/null | grep -E '\.(ts|tsx|js|jsx)$' | tr '\n' ',' | sed 's/,$//' || echo "")

          if [ ! -z "$CHANGED_FILES" ]; then
            echo "Checking changed frontend files: $CHANGED_FILES"
            npm ci
            npm run lint
          else
            echo "No frontend files changed. Skipping lint."
            exit 0
          fi

      - name: Test backend
        working-directory: backend
        run: |
          mvn clean test

      - name: Test frontend
        working-directory: frontend
        run: |
          npm ci
          npm run test:coverage

      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner

      - name: Building and testing with sonar
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            dotnet sonarscanner begin /k:"filipgajic_burger-builder" /o:"filipgajic" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.pullrequest.key="${{ github.event.pull_request.number }}" /d:sonar.pullrequest.branch="${{ github.head_ref }}" /d:sonar.pullrequest.base="${{ github.base_ref }}" /d:sonar.java.coveragePlugin=jacoco /d:sonar.coverage.jacoco.xmlReportPaths="backend/target/site/jacoco/jacoco.xml" /d:sonar.javascript.lcov.reportPaths="frontend/coverage/lcov.info"
          else
            dotnet sonarscanner begin /k:"filipgajic_burger-builder" /o:"filipgajic" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.branch.name="${{ github.ref_name }}" /d:sonar.java.coveragePlugin=jacoco /d:sonar.coverage.jacoco.xmlReportPaths="backend/target/site/jacoco/jacoco.xml" /d:sonar.javascript.lcov.reportPaths="frontend/coverage/lcov.info"
          fi
          
          # Run backend tests with coverage
          cd backend
          mvn clean test jacoco:report
          cd ..
          
          # Run frontend tests with coverage
          cd frontend
          npm ci
          npm run test:coverage
          cd ..
          
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build-push:
    env:
      DOCKER_BUILDKIT: 1
    runs-on: ubuntu-latest
    name: Build push for ${{ matrix.spec.image_name }}:${{ github.sha }}
    environment: staging
    strategy:
      matrix:
        spec:
          [
            {
              image_name: "burgerbuilder-backend",
              dockerfile_path: "backend/Dockerfile",
              context: "backend",
            },
            {
              image_name: "burgerbuilder-frontend",
              dockerfile_path: "frontend/Dockerfile",
              context: "frontend",
            },
          ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: filipbourgerappacr.azurecr.io
          username: ${{ secrets.ACR_DOCKER_USER }}
          password: ${{ secrets.ACR_DOCKER_PAT }}

      - name: Building ${{ matrix.spec.image_name }}:${{ github.sha }}
        run: |
          docker build -t filipbourgerappacr.azurecr.io/${{ matrix.spec.image_name }}:${{ github.sha }} ${{ matrix.spec.context }} -f ${{ matrix.spec.dockerfile_path }}

      - name: Pushing ${{ matrix.spec.image_name }}:${{ github.sha }}
        if: ${{ github.ref == 'refs/heads/master' }}
        shell: bash
        run: |
          docker tag filipbourgerappacr.azurecr.io/${{ matrix.spec.image_name }}:${{ github.sha }} filipbourgerappacr.azurecr.io/${{ matrix.spec.image_name }}:latest
          docker push filipbourgerappacr.azurecr.io/${{ matrix.spec.image_name }}:${{ github.sha }}
          docker push filipbourgerappacr.azurecr.io/${{ matrix.spec.image_name }}:latest
        

  # deploy:
  #   needs: [build-push]
  #   if: ${{ github.ref == 'refs/heads/master' }}
  #   name: Deploying ${{ github.sha }} to staging environment
  #   uses: ./.github/workflows/deploy.yaml
  #   with:
  #     environment: staging
  #     image_tag: ${{ github.sha }}
  #   secrets:
  #     inherit